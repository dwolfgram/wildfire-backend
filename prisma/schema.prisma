generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id @default(uuid()) @db.Uuid
  email                 String            @unique
  username              String?           @unique
  spotifyId             String            @unique
  spotifyUri            String            @unique
  pfp                   String?
  country               String
  product               String
  displayName           String
  explicitContent       Boolean
  createdAt             DateTime          @default(now())
  createdInitialTracksAt DateTime?      
  sentSongs             Song[]          @relation("SenderSongs")
  receivedSongs         Song[]          @relation("ReceiverSongs")
  userTracks            Song[]           @relation("UserTracks")
  followers             Follow[]          @relation("followers")
  following             Follow[]          @relation("following")
  notifications         Notification[]    @relation("UserNotifications")
  sentNotifications     Notification[]    @relation("UserSentNotifications")
  sentConversations     Conversation[]    @relation("userA")
  receivedConversations Conversation[]    @relation("userB")
  notificationToken     String?           @unique
  spotifyTokens         SpotifyToken[]    @relation("UserSpotifyTokens")
  discoverWeeklyId      String?           

  @@index([email])
}

model Song {
  id              String     @id @default(uuid()) @db.Uuid
  userId          String?    @db.Uuid
  user            User?      @relation("UserTracks", fields: [userId], references: [id])
  senderId        String?    @db.Uuid
  sender          User?      @relation("SenderSongs", fields: [senderId], references: [id])
  receiverId      String?    @db.Uuid
  receiver        User?      @relation("ReceiverSongs", fields: [receiverId], references: [id])
  spotifyId       String
  albumImage      String
  albumName       String
  spotifyUri      String
  name            String
  artistName      String
  artistUri       String
  durationMs      Int
  createdAt       DateTime  @default(now())
  seen            Boolean   @default(false)
  seenAt          DateTime?
  trackType       TrackType
  conversationId  String?   @db.Uuid
  conversation    Conversation? @relation("conversationMessages", fields: [conversationId], references: [id])
  history         Song[]    @relation("SongHistory")
  inHistoryOf     Song[]    @relation("SongHistory")

  @@unique([userId, spotifyId, trackType])
  @@index([conversationId])
  @@index([userId, trackType])
}

model Follow {
  id            String   @id @default(uuid()) @db.Uuid
  followerId    String   @db.Uuid
  followingId   String   @db.Uuid
  createdAt     DateTime @default(now())
  accepted      Boolean? 
  follower      User     @relation("following", fields: [followerId], references: [id])
  following     User     @relation("followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Conversation {
  id              String   @id @default(uuid()) @db.Uuid
  userAId         String   @db.Uuid
  userBId         String   @db.Uuid
  createdAt       DateTime @default(now())
  lastMessageAt   DateTime?

  userA           User     @relation("userA", fields: [userAId], references: [id])
  userB           User     @relation("userB", fields: [userBId], references: [id])
  messages        Song[] @relation("conversationMessages")

  @@unique([userAId, userBId])
  @@index([id, userAId, userBId])
}

model Notification {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  type        NotificationType
  message     String
  seen        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  senderId    String?   @db.Uuid
  sender      User?    @relation("UserSentNotifications", fields: [senderId], references: [id])
  user        User     @relation("UserNotifications", fields: [userId], references: [id])

  @@index([userId])
}

model SpotifyToken {
  id          String   @id @default(uuid())
  accessToken String
  refreshToken String
  scope       String?
  tokenType   String
  expiresIn   Int
  createdAt   DateTime @default(now())
  userId      String   @db.Uuid @unique
  user        User?     @relation("UserSpotifyTokens", fields: [userId], references: [id])

  @@index([userId])
}

enum TrackType {
  SAVED_TRACK
  TOP_LISTEN
  DISCOVER_WEEKLY
  SENT_TRACK
  WILDFIRE_LIKE
}

enum NotificationType {
  NEW_FOLLOWER
  RECEIVED_SONG
  LIKED_SONG
  ALERT
  SHARED_SONG
}
